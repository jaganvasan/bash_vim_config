# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

alias vi='/usr/bin/vim'
#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

alias gdb="/usr/bin/gdb"
alias gdb76="/u/eng/va/gdb/7.6/bin/gdb"
alias gdb78="/u/eng/va/gdb/7.8/bin/gdb"

export PRETTY=1
PATH=$PATH:/mnt/project/granite/rbt-git-scripts/bin/:/mnt/project/granite/toolchains/clang35/bin
WSROOT="/mnt/project/granite/users/jsrinivasan"

# Git bash completion
# source ~/bin/git-completion.bash

#Make bash behave like VI
set -o vi

#!/bin/bash
function build_cscope()
{
    path_to_src="$1"

    if [ -z "$path_to_src"]; then
        path_to_src=`pwd`
    fi

    echo "Building cscope @ $path_to_src"

    # find $path_to_src -type f \( -name "*.c" -o -name "*.cc" -o -name "*.sh" -o -name "*.py" -o -name "*.h" \) > cscope.files
    find $path_to_src -type f \( -name "*.c" -o -name "*.cc" -o -name "*.sh" -o -name "*.h" \) > cscope.files
    cscope -b
}

#!/bin/bash
function cdws()
{
    if [ -z "$1" ]; then
        ws="$WSROOT"
    else
        ws="$WSROOT/$1"
    fi

    cd $ws
}

#!/bin/bash
function catws()
{
    if [ -z "$1" ]; then
        ws="$WSROOT"
    else
        ws="$WSROOT/$1"
    fi

    if [ -d "$ws" ]; then
        echo $ws
    else
        echo "$ws does not exist"
    fi
}

bld_root="/work/jsrinivasan"
#!/bin/bash
function cdbld()
{
    if [ -z "$1" ]; then
        bld_dir="$bld_root"
    else
        bld_dir="$bld_root/$1"
    fi

    cd $bld_dir
}

#!/bin/bash
function setlogrc()
{
    if [ -z "$1" ]; then
        logrc_root="~/.pftechlogrc"
    else
        logrc_root="$1"
    fi

    export TEST_LOGRC="$logrc_root"
}

#!/bin/bash
function setldpath()
{
    if [ -z "$1" ]; then
        ldlib_path=`pwd`
    else
        ldlib_path="$1"
    fi

    export LD_LIBRARY_PATH="$ldlib_path"
}

#!/bin/bash
function build_ctags()
{
    path_to_src="$1"

    if [ -z "$path_to_src"]; then
        path_to_src=`pwd`
    fi

    echo "Building ctags @ $path_to_src"

    /usr/bin/ctags -R .
}
